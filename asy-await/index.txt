Q.what is async-await
The async and await keywords are used in modern JavaScript (and other languages like Python) to handle asynchronous operations more efficiently and cleanly. These keywords help simplify the management of asynchronous code, making it behave more like synchronous code.


Why use async and await?
Avoiding Callback Hell: Traditional asynchronous JavaScript (using callbacks) often leads to deeply nested code, known as "callback hell," which is hard to read and maintain. async and await help flatten this structure, making the code more readable.

Improving Code Readability: async and await make asynchronous code look like synchronous code, making it easier to follow and debug.

Error Handling: Using async/await allows you to use try/catch blocks for handling errors, which is much cleaner than managing errors through callback functions.

Performance: While not inherently faster, async and await allow asynchronous operations to run concurrently, not blocking the execution of other code. This leads to performance improvements in I/O-bound tasks like API requests, file reading/writing, etc.

Where to use async and await?
Inside Functions: You can use await inside an async function. The async keyword makes a function return a Promise, and inside it, await pauses the execution until the Promise resolves.

Example:
async function fetchData() {
  try {
    let response = await fetch('https://api.example.com/data');
    let data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}


2.Promises: When working with Promises, async and await make the code cleaner by automatically handling promise resolution or rejection.

function someAsyncTask() {
  return new Promise(resolve => {
    setTimeout(() => resolve('Task Complete'), 1000);
  });
}

async function doTask() {
  let result = await someAsyncTask();
  console.log(result);  // Outputs 'Task Complete'
}
doTask();

Handling Multiple Asynchronous Tasks: When you need to perform multiple asynchronous tasks, async/await can help you write the code sequentially (one after another), but they still allow the tasks to run asynchronously.

Example:

javascript
Copy
async function fetchData() {
  let data1 = await fetch('https://api.example1.com');
  let data2 = await fetch('https://api.example2.com');
  console.log('Fetched both data sets');
}