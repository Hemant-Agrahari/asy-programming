1. What is SSR?
Ans:
Server-Side Rendering (SSR) is a technique where HTML content is generated on the server and sent to the client's browser. Instead of the browser fetching data and rendering pages, the server delivers pre-rendered content for faster initial load times.

How it Works:
1.A request is made from the client to the server.
2.The server processes the request, fetches data if necessary, and compiles the content into HTML.
3.The fully rendered HTML is sent back to the client.
4.The client displays the content, and JavaScript takes over for interactivity if needed.

Benefits:
1.SEO-Friendly: SSR provides search engines with fully rendered content, improving SEO performance.
2.Faster First Page Load: Since the server pre-renders content, the user gets meaningful content more quickly.
3.Better Performance on Low-End Devices: Shifts the rendering responsibility to the server rather than the user's device.

2.What is Static site generation?
Ans.Static Site Generation (SSG) is a technique where HTML pages are pre-rendered at build time. The content is generated once during the build process and then served as static files when users request the pages.

How It Works:
1.During the build process, the application generates static HTML files for each page.
2.These files are deployed to a content delivery network (CDN) for fast delivery.
.When users request a page, the server serves the pre-rendered HTML without additional processing.

Benefits:
1.Fast Performance: Since pages are pre-rendered, load times are extremely fast.
2.Scalability: Easy to scale by serving static files from a CDN.
3.SEO-Friendly: Search engines receive fully rendered pages.
4.Reduced Server Load: No dynamic server processing for each request.

"In Next.js, SSG can be achieved using the getStaticProps and getStaticPaths functions."

3.What is Client Site Rendering?
Client-Side Rendering (CSR) is a rendering technique where the browser receives a minimal HTML shell from the server, and JavaScript is executed on the client to render the content dynamically.

How it Works:
1.The initial request sends back a minimal HTML file with JavaScript bundled.
2.The browser downloads the JavaScript and executes it to fetch additional data and render the complete page.

Benefits:
1.Rich Interactivity: Best for applications requiring dynamic interactions and user-driven experiences.
2.Seamless UI Transitions: Faster in-app navigation after the initial load.
3.Efficient for SPAs (Single Page Applications): Good for dashboards and admin panels.

When to Use CSR Instead of SSR or SSG:
1.Highly interactive dashboards or admin panels.
2.Applications where SEO isn't critical (internal tools).
3.Real-time data updates (like chat applications).


4. What is nextjs?
"Next.js is a React-based framework developed by Vercel that enables developers to build server-rendered and statically generated web applications with ease. It enhances the development experience by providing built-in features such as routing, API handling, and image optimization."

Key Features of Next.js:
1.Hybrid Rendering (SSR, SSG, and CSR):
2.Supports server-side rendering, static site generation, and client-side rendering to handle different application requirements.
3.File-Based Routing:
Organizes routes based on the file system in the pages/ or app/ directory.
4.API Routes:
Enables developers to create serverless API endpoints in the same project under the /api directory.
5.Automatic Code Splitting:
Loads only the JavaScript needed for a page, improving performance.
6.Image Optimization:
The next/image component optimizes images for better performance.
7.Incremental Static Regeneration (ISR):
Allows static pages to be updated without rebuilding the entire site.
8.Built-In SEO Support:
Offers easy ways to manage metadata for SEO using the Head component.
9.Middleware and Edge Functions:
Allows you to run code at the edge closer to users for faster request handling.


Why Use Next.js:
1.Performance: Faster initial load with hybrid rendering.
2.SEO Optimization: Ideal for SEO-critical applications with pre-rendering options.
3.Developer Productivity: Built-in API routes, routing, and middleware reduce setup time.
4.Scalability: Supports both server-rendered and static applications.
5.Full Stack Support: Serverless API routes for backend integration.


Q.Q.What is React.js?
Ans:"React.js is a popular JavaScript library developed by Meta (formerly Facebook) for building user interfaces (UIs), particularly for single-page applications (SPAs). It allows developers to create dynamic and responsive web applications using a component-based architecture."

Advantage:
1.Component-Based Architecture:
2.Virtual DOM
3.Declarative UI
4.Declarative UI
5.Unidirectional Data Flow:
Data flows in a single direction from parent components to child components, making it easier to debug and maintain.
6.Hooks (State and Lifecycle Management):Hooks like useState and useEffect allow developers to manage state and side effects in functional components.

Q.What is SPA?
Ans:"A Single-Page Application (SPA) is a web application or website that loads a single HTML page and dynamically updates the content without requiring a full page reload from the server. SPAs deliver a smooth, fast, and app-like user experience by handling most of the interactions on the client side."

How SPAs Work:
1.The initial request from the browser fetches the entire application shell (HTML, CSS, and JavaScript).
2.As users navigate within the app, the content is updated dynamically using AJAX calls or fetch API without reloading the entire page.
3.Client-side routing is used to render different views.

Common Features:
Dynamic Content Updates: Only the necessary data is fetched and rendered on the page.
Fast Performance: Since there are fewer full-page reloads, the application feels faster and smoother.

Example of SPAs:
1.Gmail: The entire mailbox interface updates dynamically as you navigate between folders.
2.Facebook: The page doesn't reload when you check notifications or messages.
3.Twitter: The timeline updates with infinite scrolling without refreshing.

Advantages of SPAs:
1.Faster Loading Time: After the initial load, content updates are faster.
2.Better User Experience: Smooth and seamless interactions.
3.Reduced Server Load: Fewer page requests to the server.
4.Code Reusability: Can share code between the front-end and back-end.


Q: What is JSX in React?
Answer:
"JSX stands for JavaScript XML, and it is a syntax extension for JavaScript used in React. It allows developers to write HTML-like code directly in JavaScript, which React then transforms into React elements using Babel behind the scenes."

Why Use JSX?
1.Readable and Maintainable Code: It makes the code more readable by combining the structure (HTML) with the logic (JavaScript).
2.Component-Based Architecture: Easy to build UI components by combining HTML markup and JavaScript in one place.
3.Compile-Time Optimizations: JSX is compiled into efficient JavaScript for the browser.

Q.What is Fragmentation?
Ans:"A Fragment in React is a special component provided by React to group multiple child elements without adding extra nodes to the DOM. It helps maintain cleaner and more optimized HTML structures."

Q.Why Promises Have Higher Precedence Than setTimeout() in JavaScript
In JavaScript's event loop, Promises have a higher priority than setTimeout() because of how they are scheduled in the Microtask Queue and Macrotask Queue.

Event Loop Breakdown
Call Stack: Executes synchronous code line by line.
Microtask Queue: Handles higher-priority asynchronous tasks, such as Promises (.then(), .catch(), .finally()) and MutationObserver callbacks.
Macrotask Queue: Handles lower-priority asynchronous tasks, such as setTimeout(), setInterval(), and I/O operations.

Execution Priority:
Microtasks (Promises) are executed immediately after the current synchronous code completes.
Macrotasks (setTimeout) are executed only after the entire Microtask Queue is emptied.

Why Use Fragment?
Avoids Extra Markup:

Wrapping elements in a <div> can clutter the HTML structure unnecessarily. Fragments solve this by avoiding unnecessary wrapper elements.
Improved Performance:

Fragments do not introduce extra nodes, which makes rendering more efficient.
Cleaner and Semantic HTML:

Keeps the structure of your HTML clean and free from redundant tags.


Q.What is useCallback hook?
Ans.The useCallback hook is a built-in hook in React that allows you to memoize functions to prevent unnecessary re-creations on every render. It is useful when passing functions as props to child components or when a function depends on certain values.

const memoizedCallback = useCallback(() => {
  // Function logic
}, [dependencies]);

Why Use useCallback?
1.Performance Optimization: Prevents child components from being unnecessarily re-rendered by ensuring the same function instance is passed.
2.Stable Function References: Useful when functions are passed as dependencies to other hooks like useEffect or as props to child components.

Q.What is useMemo hooks?
Ans.The useMemo hook in React is used to memoize the result of a computation and optimize performance by avoiding unnecessary recalculations during re-renders. It ensures that the function only recomputes the value when its dependencies change.

example
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

Parameters:
1.Callback Function: A function that contains the expensive computation logic.
2.Dependency Array: Variables that the computation depends on. The callback is re-executed only if any of these values change.

Why Use useMemo?
1.Performance Optimization: Avoids re-running heavy computations during every render.
2.Referential Stability: Helps maintain stable references for computed values, especially when passed as props to child components.

What is react.strict?
Ans:React.StrictMode is a tool in React used to highlight potential issues in an application during development. It helps identify unsafe lifecycle methods, side effects, and deprecated APIs, promoting better coding practices and ensuring future compatibility with React updates.

Q: What is the useState Hook?
Ans: The useState hook in React is a built-in function that allows you to add state management to functional components. It enables components to maintain and update local state values, making them dynamic and interactive.
syntax:
const [state, setState] = useState(initialValue);

Parameters:
initialValue: The initial state value (can be a string, number, boolean, array, object, or even a function).
Returns:
state: The current state value.
setState: A function to update the state.

Q.What is useEffect?
ans: The useEffect hook in React allows you to perform side effects in functional components. It replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount in class components.

useEffect(() => {
  // Side effect logic
  return () => {
    // Cleanup logic (optional)
  };
}, [dependencies]);
Parameters:
Callback Function: Contains the side effect logic and optional cleanup.
Dependencies (array): Determines when the effect should run. React will re-run the effect only if one or more dependencies change.

Q.What is useReducer hook?

Ans: The useReducer hook in React is an alternative to useState for managing complex state logic. It allows state transitions based on specific actions and is particularly useful when the state involves multiple sub-values or complex updates.

const [state, dispatch] = useReducer(reducer, initialState);

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}


Q.How can we pass data from child component to parent component?
Ans:In React, data is typically passed from parent to child via props. However, to pass data from a child component to a parent, the parent needs to provide a callback function that the child can call with the data as an argument.


Steps to Pass Data from Child to Parent
1.Define a function in the parent component.
2.Pass the function as a prop to the child component.
3.Call the function from the child component and pass the data.

Alternative Methods
State Management Libraries: Use Redux, Zustand, or Recoil for large-scale applications.
Context API: Share state across components without explicit prop drilling.
Event Emitters: For non-React systems, though less common in React itself.

Q: What is Props Drilling?
Ans: Props drilling is a pattern in React where data is passed from a parent component to deeply nested child components through multiple layers of intermediary components. Each intermediate component must pass the props down, even if they do not directly use the data.

Q.What is the difference between props and state?
1.Props are read-only and passed from parent to child components, while state is mutable and managed within the component itself.
2.Props cannot be modified by the receiving component, but state can be updated using setState or useState, triggering a re-render.

Q.What is Higher order components?
Ans. 

Q.What are API methods?
Ans. 

Q.What is the difference between axios and fetch?
1.Error Handling: Fetch only handles network errors, while Axios automatically handles both network and HTTP errors.
2.JSON Parsing: Fetch requires manual JSON parsing with response.json(), whereas Axios parses JSON automatically.
4.Syntax: Axios has a cleaner and more concise syntax compared to the more verbose Fetch API.
5.Request Cancellation: Axios supports request cancellation using CancelToken, while Fetch has limited support.


Q.What is stateless component?
A stateless component in React is a component that does not maintain its own state. It is simply a function that receives props and renders the UI based on those props. Stateless components are also sometimes referred to as functional components, especially after the introduction of React hooks.

Characteristics of Stateless Components:
No local state: They don't manage any internal state using useState or this.state.
Pure UI: Their role is to receive data (props) and render a presentation, with no side effects.
Function-based: They are typically created as functions (i.e., function components).
